import telebot
import stripe
import sqlite3
import time
from groq import Groq
from flask import Flask
from threading import Thread

# === API KEYS ===
TELEGRAM_TOKEN = "7710632976:AAETD5-UOJAMXnR1S2D4GTTP9L_21_7BbCA"
GROQ_API_KEY = "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"
STRIPE_SECRET_KEY = "sk_test_51R4QVlP3En7UClAYUZecvKYKgWiUNC9V2zYnIpfl5aTOJc84Qe9VGUUOMRW04KgAw7VyM9JY9uXhHTALKSows5EB00yNqVAerJ"

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = Groq(api_key=GROQ_API_KEY)
stripe.api_key = STRIPE_SECRET_KEY

# === Flask App for UptimeRobot ===
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    Thread(target=run).start()

keep_alive()

# === Database Setup ===
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    subscription TEXT,
    expiry_date INTEGER
)
""")
conn.commit()

# === Start Command ===
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîç Analyze Match")
    bot.send_message(
        message.chat.id,
        "<b>ü§ñ AI Match Analyzer</b>\n\n"
        "Subscription plans:\n"
        "üî∏ $7 ‚Äì One-time\n"
        "üî∏ $19.90 ‚Äì Weekly\n"
        "üî∏ $35 ‚Äì Monthly\n\n"
        "Click below to analyze matches!",
        parse_mode="HTML",
        reply_markup=markup
    )

# === Analyze Match ===
@bot.message_handler(func=lambda msg: msg.text == "üîç Analyze Match")
def analyze_match(msg):
    user_id = msg.chat.id
    cursor.execute("SELECT expiry_date FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user and user[0] > int(time.time()):
        bot.send_message(user_id, "‚úÖ Send match details to analyze:")
    else:
        markup = telebot.types.InlineKeyboardMarkup()
        markup.row(
            telebot.types.InlineKeyboardButton("üí≥ $7", callback_data="pay_7"),
            telebot.types.InlineKeyboardButton("üí≥ $19.9", callback_data="pay_19.9"),
            telebot.types.InlineKeyboardButton("üí≥ $35", callback_data="pay_35")
        )
        bot.send_message(user_id, "‚ùå Subscription required:", reply_markup=markup)

# === Payment via Stripe ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def payment(call):
    amount = float(call.data.split("_")[1])

    session = stripe.checkout.Session.create(
        payment_method_types=['card'],
        line_items=[{
            'price_data': {
                'currency': 'usd',
                'product_data': {'name': 'AI Match Analyzer'},
                'unit_amount': int(amount * 100),
            },
            'quantity': 1,
        }],
        mode='payment',
        success_url="https://t.me/YOUR_BOT_USERNAME?start=success",
        cancel_url="https://t.me/YOUR_BOT_USERNAME?start=cancel"
    )
    bot.send_message(call.message.chat.id, f"üí≥ Pay here:\n{session.url}")

@bot.message_handler(commands=['success'])
def success(msg):
    expiry = int(time.time()) + 30*24*60*60
    cursor.execute("INSERT OR REPLACE INTO users VALUES (?, ?, ?)", (msg.chat.id, "paid", expiry))
    conn.commit()
    bot.send_message(msg.chat.id, "üéâ Payment successful!")

# === Match Analysis ===
@bot.message_handler(func=lambda msg: True)
def match_analysis(msg):
    user_id = msg.chat.id
    cursor.execute("SELECT expiry_date FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user and user[0] > int(time.time()):
        bot.send_message(user_id, "‚ö° Analyzing...")
        try:
            prompt = f"Briefly analyze this match and predict odds:\n{msg.text}"
            response = client.chat.completions.create(
                model="llama3-70b-8192",
                messages=[{"role": "user", "content": prompt}]
            )
            result = response.choices[0].message.content
            for x in range(0, len(result), 4000):
                bot.
send_message(user_id, result[x:x+4000])
        except Exception as e:
            bot.send_message(user_id, f"‚ùå Error:\n{e}")
    else:
        bot.send_message(user_id, "‚ùå Subscription required.")

bot.polling()
